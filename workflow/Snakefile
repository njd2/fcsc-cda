from pathlib import Path

src = Path("resources")

res_int = Path("results/intermediate")
res_final = Path("results/final")

res_linkage = res_int / "linkage"
res_meta = res_int / "meta"
res_meta_issues = res_meta / "issues"
res_time_issues = res_int / "time"


rule format_linkage:
    input:
        colors=src / "wg2_linkage.xlsx",
        scatter_time="static/scatter_time_mapping.tsv",
    output:
        table=res_linkage / "wg2_linkage.tsv",
        ex_em=res_linkage / "wg2_ex_em.pdf",
        defined=res_linkage / "wg2_defined_channels.pdf",
    conda:
        "envs/xlsx.yml"
    script:
        "scripts/R/format_linkage.R"


rule read_fcs_meta:
    input:
        src / "fcs_wg2",
    output:
        meta=res_meta / "fcs_meta.tsv.gz",
        params=res_meta / "fcs_params.tsv.gz",
        warnings=res_meta / "warnings.tsv.gz",
    conda:
        "envs/fcsparser.yml"
    script:
        "scripts/python/read_metadata.py"


rule find_metadata_issues:
    input:
        combos="static/wg2_combinations.tsv",
        channels=rules.format_linkage.output.table,
        meta=rules.read_fcs_meta.output.meta,
        params=rules.read_fcs_meta.output.params,
    output:
        voltgain=res_meta_issues / "voltage_gain.tsv.gz",
        channels=res_meta_issues / "missing_channels.tsv.gz",
        issues=res_meta_issues / "all_issues.tsv.gz",
        clean=res_meta_issues / "clean.tsv.gz",
    params:
        min_events=config["min_events"],
        detector_limits=config["detector_limits"],
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/R/find_metadata_issues.R"


rule find_time_issues:
    input:
        channels=rules.format_linkage.output.table,
        meta=rules.find_metadata_issues.output.issues,
    output:
        anomaly=res_time_issues / "anomaly.tsv.gz",
        flat=res_time_issues / "flat.tsv.gz",
        top=res_time_issues / "top.tsv.gz",
        events=res_time_issues / "events.tsv.gz",
    threads: 20
    params:
        min_events=config["min_events"],
        time_limits=config["time_limits"],
    conda:
        "envs/fcsparser.yml"
    script:
        "scripts/python/find_time_issues.py"


rule summarize_time_issues:
    input:
        meta=rules.read_fcs_meta.output.meta,
        events=rules.find_time_issues.output.events,
        anomaly=rules.find_time_issues.output.anomaly,
    output:
        res_final / "issues_summary.html",
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/Rmd/summarize_time_issues.Rmd"


rule summarize_clean_up:
    input:
        issues=rules.find_metadata_issues.output.issues,
        events=rules.find_time_issues.output.events,
        anomaly=rules.find_time_issues.output.anomaly,
    output:
        res_final / "clean_up_summary.html",
    params:
        min_events=config["min_events"],
        detector_limits=config["detector_limits"],
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/Rmd/summarize_clean_up.Rmd"


rule all:
    input:
        rules.summarize_time_issues.output,
        rules.summarize_clean_up.output,
