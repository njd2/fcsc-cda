from pathlib import Path

src = Path("resources")

res_int = Path("results/intermediate")
res_int_fcs = res_int / "fcs"
res_meta = res_int / "meta"
res_time = res_int / "time"

res_final = Path("results/final")
res_final_summary = res_final / "summaries"

################################################################################
# stage 1 - metadata filtering and standardization
#
# Find issues with each dataset based solely on the metadata of each file. This
# includes things like voltage and event count. Critically, we can eliminate
# entire datasets at this stage that don't have Matrix 2 and cyroPBMC datasets
# (which we can do later as well, but doing it here potentially saves lots of
# useless computation).
#
# When done, rewrite each "valid" FCS file using standardized metadata.

# TODO this might change if I end up checking that the color channels are indeed
# placed properly based on signal/noise ratios, which really means we might have
# to split out the color/params analysis.


rule read_fcs_meta:
    input:
        src / "fcs_wg2",
    output:
        meta=res_meta / "standard_metadata.tsv",
        params=res_meta / "parameters.tsv",
        warnings=res_meta / "warnings.tsv",
        nonstandard=res_meta / "nonstandard_metadata.tsv",
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/read_metadata.py"


rule find_metadata_issues:
    input:
        combos="static/wg2_combinations.tsv",
        channels="static/wg2_linkage.tsv",
        meta=rules.read_fcs_meta.output.meta,
        params=rules.read_fcs_meta.output.params,
    output:
        voltgain=res_meta / "voltage_gain.tsv",
        channels=res_meta / "missing_channels.tsv",
        issues=res_meta / "all_issues.tsv",
    params:
        min_events=config["min_events"],
        detector_limits=config["detector_limits"],
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/R/find_metadata_issues.R"


rule standardize_fcs:
    input:
        channels="static/wg2_linkage.tsv",
        meta=rules.find_metadata_issues.output.issues,
    output:
        res_int_fcs / "standardized" / "files.tsv",
    threads: 20
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/standardize_fcs.py"


rule remove_edge_events:
    input:
        rules.standardize_fcs.output,
    output:
        results=res_meta / "overrange.tsv",
        files=res_int_fcs / "no_edge_events" / "files.tsv",
    threads: 20
    params:
        edge_thresh=config["edge_event_threshold"],
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/remove_edge_events.py"


rule summarize_metadata_errors:
    input:
        issues=rules.find_metadata_issues.output.issues,
        voltgain=rules.find_metadata_issues.output.voltgain,
        edge_removed=rules.remove_edge_events.output.results,
    output:
        res_final_summary / "metadata_errors.html",
    params:
        min_events=config["min_events"],
        detector_limits=config["detector_limits"],
        edge_thresh=config["edge_event_threshold"],
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/Rmd/summarize_metadata_errors.Rmd"


################################################################################
# check time channel for issues
#
# We expect the time channel to be "linear" (meaning always increasing at a
# steady rate) if this isn't true there might be an issue.


rule find_time_issues:
    input:
        files=rules.standardize_fcs.output[0],
        meta=rules.find_metadata_issues.output.issues,
    output:
        anomaly=res_time / "anomaly.tsv.gz",
        flat=res_time / "flat.tsv.gz",
        top=res_time / "top.tsv.gz",
        events=res_time / "events.tsv.gz",
    threads: 20
    params:
        min_events=config["min_events"],
        time_limits=config["time_limits"],
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/find_time_issues.py"


rule summarize_time_errors:
    input:
        meta=rules.read_fcs_meta.output.meta,
        issues=rules.find_metadata_issues.output.issues,
        events=rules.find_time_issues.output.events,
        anomaly=rules.find_time_issues.output.anomaly,
        flat=rules.find_time_issues.output.flat,
    output:
        res_final_summary / "time_issues_summary.html",
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/Rmd/summarize_time_errors.Rmd"


# rule compute_channel_entropies:
#     input:
#         rules.remove_edge_events.output.files,
#     output:
#         res_int / "channel_qc" / "entropy.tsv.gz",
#     threads: 20
#     params:
#         embedding_sizes=[3, 5],
#         delays=[1],
#     conda:
#         "envs/fcs.yml"
#     script:
#         "scripts/python/fcs/compute_perm_entropy.py"


rule all:
    input:
        rules.summarize_metadata_errors.output,
        rules.summarize_time_errors.output,
        # rules.compute_channel_entropies.output,
