from pathlib import Path

src = Path("resources")

res_int = Path("results/intermediate")
res_int_fcs = res_int / "fcs"
res_int_sop1 = res_int / "sop1"
res_int_sop2 = res_int / "sop2"
res_meta = res_int / "meta"
res_meta_std = res_meta / "standardized_fcs"
res_time = res_int / "time"

res_final = Path("results/final")
res_final_summary = res_final / "summaries"

################################################################################
# Metadata filtering and standardization
#
# Find issues with each dataset based solely on the metadata of each file. This
# includes things like voltage and event count. Critically, we can eliminate
# entire datasets at this stage that don't have Matrix 2 and cyroPBMC datasets
# (which we can do later as well, but doing it here potentially saves lots of
# useless computation).
#
# When done, rewrite each "valid" FCS file using standardized metadata.

# TODO this might change if I end up checking that the color channels are indeed
# placed properly based on signal/noise ratios, which really means we might have
# to split out the color/params analysis.


rule check_md5s:
    input:
        checksums="static/nist_wg2_md5.tsv",
        fcs_files=src / "fcs_wg2",
    output:
        res_meta / "md5_passed.flag",
    log:
        res_meta / "md5_failed.txt",
    shell:
        """
        cur=$(pwd)
        cd {input.fcs_files} && \
        md5sum --quiet -c $cur/{input.checksums} 2> $cur/{log} && \
        touch $cur/{output}
        """


rule enumerate_input_fcs:
    input:
        fcs_files=src / "fcs_wg2",
    output:
        res_int_fcs / "input_fcs.tsv",
    run:
        root = Path(input[0])
        with open(output[0], "w") as f:
            for i, p in enumerate(sorted(root.iterdir())):
                if p.name.endswith(".fcs"):
                    f.write("\t".join([str(i), str(p)]) + "\n")


rule read_fcs_meta:
    input:
        _checksums=rules.check_md5s.output,
        fcs_files=rules.enumerate_input_fcs.output[0],
    output:
        meta=res_meta / "standard_metadata.tsv",
        params=res_meta / "parameters.tsv",
        warnings=res_meta / "warnings.tsv",
        nonstandard=res_meta / "nonstandard_metadata.tsv",
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/standardization/read_metadata.py"


rule generate_exclusions:
    input:
        "static/wg2_combinations.tsv",
    output:
        res_meta / "exclusions.tsv",
    params:
        exclusions=config["manual_exclusions"],
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/standardization/generate_exclusions.py"


rule generate_replacements:
    input:
        "static/wg2_combinations.tsv",
    output:
        res_meta / "replacements.tsv",
    params:
        replacements=config["replacements"],
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/standardization/generate_replacement.py"


rule find_metadata_issues:
    input:
        exclusions=rules.generate_exclusions.output,
        replacements=rules.generate_replacements.output,
        combos="static/wg2_combinations.tsv",
        channels="static/wg2_linkage.tsv",
        meta=rules.read_fcs_meta.output.meta,
        params=rules.read_fcs_meta.output.params,
    output:
        voltgain=res_meta / "voltage_gain.tsv",
        channels=res_meta / "missing_channels.tsv",
        issues=res_meta / "all_issues.tsv",
    params:
        min_events=config["min_events"],
        detector_limits=config["detector_limits"],
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/R/find_metadata_issues.R"


rule standardize_fcs:
    input:
        channels="static/wg2_linkage.tsv",
        meta=rules.find_metadata_issues.output.issues,
    output:
        res_int_fcs / "standardized" / "files.tsv",
    threads: 20
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/standardization/standardize_fcs.py"


rule remove_edge_events:
    input:
        rules.standardize_fcs.output,
    output:
        results=res_meta / "overrange.tsv",
        files=res_int_fcs / "no_edge_events" / "files.tsv",
    threads: 20
    params:
        edge_thresh=config["edge_event_threshold"],
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/standardization/remove_edge_events.py"


rule read_standardized_fcs_meta:
    input:
        fcs_files=rules.standardize_fcs.output[0],
    output:
        meta=res_meta_std / "standard_metadata.tsv",
        params=res_meta_std / "parameters.tsv",
        warnings=res_meta_std / "warnings.tsv",
        nonstandard=res_meta_std / "nonstandard_metadata.tsv",
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/standardization/read_metadata.py"


rule summarize_metadata_errors:
    input:
        issues=rules.find_metadata_issues.output.issues,
        voltgain=rules.find_metadata_issues.output.voltgain,
        edge_removed=rules.remove_edge_events.output.results,
    output:
        res_final_summary / "metadata_errors.html",
    params:
        min_events=config["min_events"],
        detector_limits=config["detector_limits"],
        edge_thresh=config["edge_event_threshold"],
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/Rmd/summarize_metadata_errors.Rmd"


rule list_cleaned_files:
    input:
        cleaned=rules.standardize_fcs.output,
        checksums="static/nist_wg2_md5.tsv",
    output:
        cleaned_files=res_final_summary / "cleaned_files.tsv",
        cleaned_orgs=res_final_summary / "cleaned_orgs.tsv",
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/R/list_cleaned_files.R"


################################################################################
# Clean up time channel
#
# We expect the time channel to be "linear" (meaning always increasing at a
# steady rate) if this isn't true there might be an issue.


# use pre-edge removal fcs to get full view of time channel trends/anomalies
rule find_time_issues:
    input:
        files=rules.standardize_fcs.output[0],
        meta=rules.find_metadata_issues.output.issues,
    output:
        flat=res_time / "flat.tsv.gz",
        top=res_time / "top.tsv.gz",
        events=res_time / "events.tsv.gz",
    threads: 20
    params:
        min_events=config["min_events"],
        time_limits=config["time_limits"],
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/time_channel/find_time_issues.py"


rule summarize_time_errors:
    input:
        meta=rules.read_fcs_meta.output.meta,
        issues=rules.find_metadata_issues.output.issues,
        events=rules.find_time_issues.output.events,
        flat=rules.find_time_issues.output.flat,
    output:
        res_final_summary / "time_issues_summary.html",
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/Rmd/summarize_time_errors.Rmd"


rule gate_time_channel:
    input:
        files=rules.remove_edge_events.output.files,
        gates=rules.find_time_issues.output.top,
    output:
        res_int_fcs / "clean_time_channel" / "files.tsv",
    threads: 20
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/time_channel/gate_time_channel.py"


# rule compute_channel_entropies:
#     input:
#         rules.gate_time_channel.output,
#     output:
#         res_int / "channel_qc" / "entropy.tsv.gz",
#     threads: 20
#     params:
#         embedding_sizes=[3, 5],
#         delays=[1],
#     conda:
#         "envs/fcs.yml"
#     script:
#         "scripts/python/fcs/time_channel/compute_perm_entropy.py"


# rule compute_power_spectra:
#     input:
#         rules.gate_time_channel.output,
#     output:
#         res_int / "channel_qc" / "spectra.tsv.gz",
#     threads: 20
#     params:
#         freq_steps=40,
#         max_freq=10,
#     conda:
#         "envs/fcs.yml"
#     script:
#         "scripts/python/fcs/time_channel/compute_power_spectra.py"


################################################################################
# Run SOP 1
#
# This requires that we (manually) gate the two scatter channels to correctly
# identify the beads, since doing this automatically is probably quite hopeless.
# Beyond that, this will gate the FC and rainbow beads, use the former to
# calibrate each channel, then run a regression on the rainbow beads to verify
# that they all line up.


rule sop1_generate_gates:
    input:
        files=rules.gate_time_channel.output[0],
        gates="static/gates.yml",
        params=rules.read_standardized_fcs_meta.output.params,
    output:
        res_int_sop1 / "gates" / "files.tsv",
    log:
        res_int_sop1 / "gates" / "debug.json",
    threads: 20
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/sop1/generate_gates.py"


rule sop1_read_mfi:
    input:
        files=rules.sop1_generate_gates.output[0],
        erf="static/erf.tsv",
    output:
        fc=res_int_sop1 / "fcs_beads.tsv",
        rainbow=res_int_sop1 / "rainbow_beads.tsv",
        cal=res_int_sop1 / "calibrations.tsv",
    threads: 20
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/sop1/read_mfi.py"


rule sop1_make_summary:
    input:
        fc=rules.sop1_read_mfi.output.fc,
        rainbow=rules.sop1_read_mfi.output.rainbow,
        cal=rules.sop1_read_mfi.output.cal,
    output:
        res_final_summary / "sop1_summary.html",
    conda:
        "envs/tidyverse.yml"
    script:
        "scripts/Rmd/sop1_make_summary.Rmd"


################################################################################
# Run SOP 2
#
# This requires that we manually gate all scatter channels (which at the very
# least will differ b/t each material, of which there are five) and then gating
# the primary channel peaks (there should be 2) in the case of traditional comp
# gating. We might also try more sophisticated methods based on regression and
# such.


rule sop2_generate_gates:
    input:
        files=rules.gate_time_channel.output[0],
        gates="static/gates.yml",
        params=rules.read_standardized_fcs_meta.output.params,
    output:
        res_int_sop2 / "gates" / "files.tsv",
    log:
        res_int_sop2 / "gates" / "debug.json",
    threads: 20
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/sop2/generate_gates.py"


rule sop2_read_mfi:
    input:
        files=rules.sop2_generate_gates.output[0],
    output:
        m1=res_int_sop2 / "matrix1.tsv",
        m2=res_int_sop2 / "matrix2.tsv",
        m3=res_int_sop2 / "matrix3.tsv",
        incomplete=res_int_sop2 / "incomplete.tsv",
    threads: 1
    conda:
        "envs/fcs.yml"
    script:
        "scripts/python/fcs/sop2/read_mfi.py"


rule all:
    input:
        rules.summarize_metadata_errors.output,
        rules.summarize_time_errors.output,
        rules.list_cleaned_files.output,
        rules.sop1_make_summary.output,
        rules.generate_replacements.output,
        # rules.sop2_read_mfi.output,
        # rules.compute_power_spectra.output,
        # rules.compute_channel_entropies.output,
